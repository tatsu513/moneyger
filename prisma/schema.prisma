generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  Payment        Category[]
  PaymentHistory PaymentHistory[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String
  maxAmount      Int
  authorId       String
  createdAt      DateTime         @default(now())
  author         User             @relation(fields: [authorId], references: [id])
  PaymentHistory PaymentHistory[]
  CategoryLabel  CategoryLabel[]
}

model CategoryLabel {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model PaymentHistory {
  id          Int      @id @default(autoincrement())
  note        String?
  price       Int
  paymentDate DateTime
  paymentId   Int
  authorId    String
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  payment     Category @relation(fields: [paymentId], references: [id])
}
